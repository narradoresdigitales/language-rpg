document.addEventListener("DOMContentLoaded", function () {
    const gameText = document.getElementById("game-text");
    const userInput = document.getElementById("user-input");
    const submitButton = document.getElementById("submit-command");
    const instructions = document.getElementById("instructions");

    let currentLanguage = "";
    let gameStarted = false;

    const messages = {
        English: {
            instructions: "Use ‚¨ÜÔ∏è (Up) to move forward, ‚¨ÖÔ∏è (Left) to look left, ‚û°Ô∏è (Right) to look right, and Spacebar to move back. Type when interacting.",
            welcome: "Welcome to the Language RPG! Type 'Spanish' or 'Russian' to start.",
            select: "You selected: ",
            moveForward: "You move forward in your quest.",
            moveBack: "You step back cautiously.",
            lookLeft: "You look to the left and see nothing unusual.",
            lookRight: "You look to the right and see nothing unusual.",
            typeToInteract: "An NPC appears! Type your response in the selected language.",
            invalid: "Invalid input. Please type 'Spanish' or 'Russian'."
        },
        Spanish: {
            instructions: "Usa ‚¨ÜÔ∏è (Arriba) para avanzar, ‚¨ÖÔ∏è (Izquierda) para mirar a la izquierda, ‚û°Ô∏è (Derecha) para mirar a la derecha, y la barra espaciadora para retroceder. Escribe cuando interact√∫es.",
            welcome: "¬°Bienvenido al Juego de Idiomas! Escribe 'Espa√±ol' o 'Ruso' para empezar.",
            select: "Seleccionaste: ",
            moveForward: "Te mueves hacia adelante en tu misi√≥n.",
            moveBack: "Das un paso atr√°s con cautela.",
            lookLeft: "Miras hacia la izquierda y no ves nada inusual.",
            lookRight: "Miras hacia la derecha y no ves nada inusual.",
            typeToInteract: "¬°Aparece un NPC! Escribe tu respuesta en el idioma seleccionado.",
            invalid: "Entrada no v√°lida. Por favor, escribe 'Espa√±ol' o 'Ruso'."
        },
        Russian: {
            instructions: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚¨ÜÔ∏è (–í–≤–µ—Ä—Ö), —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥, ‚¨ÖÔ∏è (–í–ª–µ–≤–æ) —Å–º–æ—Ç—Ä–µ—Ç—å –≤–ª–µ–≤–æ, ‚û°Ô∏è (–í–ø—Ä–∞–≤–æ) —Å–º–æ—Ç—Ä–µ—Ç—å –≤–ø—Ä–∞–≤–æ, –∏ –ø—Ä–æ–±–µ–ª, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞–∑–∞–¥. –ü–µ—á–∞—Ç–∞–π—Ç–µ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏.",
            welcome: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø–∑—ã–∫–æ–≤—É—é RPG! –í–≤–µ–¥–∏—Ç–µ '–ò—Å–ø–∞–Ω—Å–∫–∏–π' –∏–ª–∏ '–†—É—Å—Å–∫–∏–π', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            select: "–í—ã –≤—ã–±—Ä–∞–ª–∏: ",
            moveForward: "–í—ã –¥–≤–∏–∂–µ—Ç–µ—Å—å –≤–ø–µ—Ä–µ–¥ –≤ —Å–≤–æ–µ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏.",
            moveBack: "–í—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –æ—Ç—Å—Ç—É–ø–∞–µ—Ç–µ –Ω–∞–∑–∞–¥.",
            lookLeft: "–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–ª–µ–≤–æ –∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ.",
            lookRight: "–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ –∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ.",
            typeToInteract: "–ü–æ—è–≤–ª—è–µ—Ç—Å—è NPC! –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.",
            invalid: "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–ò—Å–ø–∞–Ω—Å–∫–∏–π' –∏–ª–∏ '–†—É—Å—Å–∫–∏–π'."
        }
    };

    // Start the game with the initial instruction
    gameText.innerText = messages.English.welcome;

    function processLanguageSelection(input) {
        const normalizedInput = input.toLowerCase().trim();

        // Check if the input is valid language
        if (normalizedInput === "spanish" || normalizedInput === "espa√±ol") {
            currentLanguage = "Spanish";
        } else if (normalizedInput === "russian" || normalizedInput === "—Ä—É—Å—Å–∫–∏–π") {
            currentLanguage = "Russian";
        } else {
            appendMessage(messages.English.invalid);
            return;
        }

        // Game starts after selecting a language
        gameStarted = true;
        instructions.innerText = messages[currentLanguage].instructions;
        appendMessage(messages[currentLanguage].select + currentLanguage);
        appendMessage(messages[currentLanguage].moveForward);
    }

    function handleMovement(event) {
        if (!gameStarted) return;

        let message = "";
        switch (event.key) {
            case "ArrowUp":
                message = messages[currentLanguage].moveForward;
                break;
            case "ArrowDown":
            case " ":
                message = messages[currentLanguage].moveBack;
                break;
            case "ArrowLeft":
                message = messages[currentLanguage].lookLeft;
                break;
            case "ArrowRight":
                message = messages[currentLanguage].lookRight;
                break;
        }
        if (message) appendMessage(message);
    }

    function handleUserInput() {
        const input = userInput.value.trim();
        if (!gameStarted) {
            processLanguageSelection(input);
        } else {
            appendMessage("üó£Ô∏è " + input);  // NPC interaction in selected language
        }
        userInput.value = ""; // Clear input field after processing
    }

    function appendMessage(text) {
        const newMessage = document.createElement("p");
        newMessage.innerText = text;
        gameText.appendChild(newMessage);
        gameText.scrollTop = gameText.scrollHeight;
    }

    // Event listeners
    document.addEventListener("keydown", handleMovement);
    
    // Handle Submit Button
    submitButton.addEventListener("click", function () {
        handleUserInput();
    });
    
    // Handle Enter Key Press
    userInput.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
            event.preventDefault(); // Prevent form submission
            handleUserInput();
        }
    });
});
